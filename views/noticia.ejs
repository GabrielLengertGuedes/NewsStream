<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>NewsStream ‚Äì <%= noticia.titulo %></title>
    <link rel="stylesheet" href="/style.css" />
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script> 
</head>
<body 
    data-noticia-id="<%= (noticia && noticia.id) ? noticia.id : '' %>"
    data-curtido-pelo-usuario="<%= (typeof curtidoPeloUsuario !== 'undefined' && curtidoPeloUsuario) ? 'true' : 'false' %>"
    data-seguindo-categoria-pelo-usuario="<%= (typeof seguindoCategoriaPeloUsuario !== 'undefined' && seguindoCategoriaPeloUsuario) ? 'true' : 'false' %>"
    data-categoria-noticia-detalhes-id="<%= (categoriaNoticiaDetalhes && categoriaNoticiaDetalhes.id) ? categoriaNoticiaDetalhes.id : '' %>"
>

    <header class="navbar">
        <div class="logo">NewsStream</div>
        <div class="auth-buttons">
            <div class="notification-wrapper">
                <button class="notification-button" id="notificationButton"> 
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-bell-fill" viewBox="0 0 16 16">
                        <path d="M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2m.995-14.901a1 1 0 1 0-1.99 0A5 5 0 0 0 3 6c0 1.098-.5 6-2 7h12c-1.5-1-2-5.902-2-7s-.995-14.901a1 1 1 0 1 0-1.99 0z"/>
                    </svg>
                    <span>Notifica√ß√µes</span>
                    <!-- O contador agora √© atualizado por JS -->
                    <span class="notification-count <%= numNotifications > 0 ? '' : 'hidden' %>" id="notificationCount"><%= numNotifications %></span>
                </button>
            </div>
            <button onclick="location.href='/main'">Home</button>
            <% if (usuario && usuario.isAdmin === 1) { %>
                <button onclick="location.href='/dashboard'" class="interaction-button">
                    Painel Admin
                </button>
            <% } %>
            <button onclick="location.href='/logout'">Sair</button>
        </div>
    </header>

    <!-- Pop-up de Notifica√ß√µes (agora preenchido dinamicamente) -->
    <div id="notifications-popup" class="popup-overlay hidden">
        <div class="popup-content notifications-content">
            <h3>Suas Notifica√ß√µes</h3>
            <ul class="notifications-list" id="notificationsList">
                <!-- Notifica√ß√µes ser√£o inseridas aqui via JavaScript -->
                <li class="no-notifications-message" style="text-align: center; color: #777; font-style: italic;">Nenhuma notifica√ß√£o nova.</li>
            </ul>
            <button class="close-popup-button" id="closeNotificationsButton">Fechar</button>
        </div>
    </div>

    <section class="news-container">
        <div class="tags">
            <a href="/main?categoria=<%= encodeURIComponent(noticia.categoria) %>" class="category-link">NewsStream / <%= noticia.categoria %></a>
            <% if (categoriaNoticiaDetalhes && categoriaNoticiaDetalhes.id) { %> 
                <button id="followBtn" class="follow-button <%= (typeof seguindoCategoriaPeloUsuario !== 'undefined' && seguindoCategoriaPeloUsuario) ? 'following' : '' %>" data-categoria-id="<%= categoriaNoticiaDetalhes.id %>">
                    <%= (typeof seguindoCategoriaPeloUsuario !== 'undefined' && seguindoCategoriaPeloUsuario) ? 'Seguindo' : 'üîî Seguir' %>
                </button>
            <% } else { %>
                <button id="followBtn" class="follow-button" data-categoria-id=""> 
                    üîî Seguir
                </button>
            <% } %>
        </div>

        <h1><%= noticia.titulo %></h1>
        <p class="news-meta">Publicado em <%= new Date(noticia.data_publicacao).toLocaleDateString('pt-BR') %> | Autor: <%= noticia.autor %></p>

        <img src="<%= noticia.imagemUrl %>" alt="<%= noticia.titulo %>">

        <div class="news-details">
            <%- noticia.conteudo %>
        </div>

        <div class="news-interaction">
            <div class="button-group">
                <% if (typeof curtidoPeloUsuario !== 'undefined') { %>
                    <button id="likeBtn" class="interaction-button like <%= curtidoPeloUsuario ? 'liked' : '' %>" data-noticia-id="<%= noticia.id %>">
                        <%= curtidoPeloUsuario ? 'Curtido üëç' : 'Curtir üëç' %>
                    </button>
                <% } else { %>
                    <button id="likeBtn" class="interaction-button like" data-noticia-id="<%= noticia.id %>">
                        Curtir üëç
                    </button>
                <% } %>
                <button class="interaction-button share">Compartilhar üì§</button>
                <a href="/denunciar-noticia/<%= noticia.id %>" class="interaction-button report" style="text-decoration: none;">
                    Denunciar üö´
                </a>
            </div>
        </div>

        <div class="comment-section">
            <h3>Coment√°rios</h3>
            <form method="POST" action="/comentar/<%= noticia.id %>" class="comment-form">
                <input type="text" name="comentario" placeholder="Deixe seu coment√°rio aqui" required>
                <button type="submit" class="interaction-button comment-submit-button">Comentar</button>
            </form>
        
            <% if (comentarios && comentarios.length > 0) { %>
                <ul class="comments-list">
                    <% comentarios.forEach((comentario) => { %>
                        <li class="comment-item">
                            <div class="comment-content-and-report">
                                <div class="comment-header">
                                    <span class="comment-author"><%= comentario.autor %></span>
                                    <span class="comment-date"><%= comentario.data %></span>
                                </div>
                                <p class="comment-text"><%= comentario.texto %></p>
                            </div>
                            <form method="GET" action="/denunciar-comentario/<%= noticia.id %>/<%= comentario.id %>" class="report-comment-form">
                                <button type="submit" class="report-button" title="Denunciar coment√°rio">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-flag-fill" viewBox="0 0 16 16">
                                        <path d="M14.778.085A.5.5 0 0 1 15 .5V14a.5.5 0 0 1-.085.223l-1.406 2.812A.5.5 0 0 1 13 16H3a.5.5 0.5 0 0 1-.475-.31L.085 4.887A.5.5 0 0 1 .5 4h10.325l-4.215-3.372A.5.5 0 0 1 5.465.5z"/>
                                    </svg>
                                    Denunciar
                                </button>
                            </form>
                        </li>
                    <% }) %>
                </ul>
            <% } else { %>
                <p class="no-comments-message">Nenhum coment√°rio ainda. Seja o primeiro a comentar!</p>
            <% } %>
        </div>
    </section>

    <div id="share-popup" class="popup-overlay hidden">
        <div class="popup-content">
            <h3>Not√≠cia Compartilhada!</h3>
            <p>O link desta not√≠cia foi copiado para sua √°rea de transfer√™ncia.</p>
            <p>Voc√™ pode colar e compartilhar onde desejar!</p>
            <button class="close-popup-button">Fechar</button>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const likeBtn = document.getElementById('likeBtn');
            const followBtn = document.getElementById('followBtn'); 
            const noticiaId = "<%= (noticia && noticia.id) ? noticia.id : '' %>"; 

            const bodyDataset = document.body.dataset;
            const initialCurtidoPeloUsuario = bodyDataset.curtidoPeloUsuario === 'true';
            const initialSeguindoCategoriaPeloUsuario = bodyDataset.seguindoCategoriaPeloUsuario === 'true';
            const categoriaId = bodyDataset.categoriaNoticiaDetalhesId; 

            const notificationButton = document.getElementById('notificationButton');
            const notificationsPopup = document.getElementById('notifications-popup');
            const closeNotificationsButton = document.getElementById('closeNotificationsButton');
            const notificationCountSpan = document.getElementById('notificationCount'); // Pegar pelo ID
            const notificationsList = document.getElementById('notificationsList');

            // Fun√ß√£o para buscar e exibir notifica√ß√µes
            async function fetchAndDisplayNotifications() {
                try {
                    const response = await fetch('/api/notificacoes');
                    const data = await response.json();

                    if (data.success && data.notificacoes.length > 0) {
                        notificationsList.innerHTML = ''; // Limpa a mensagem "Nenhuma notifica√ß√£o"
                        data.notificacoes.forEach(notif => {
                            const li = document.createElement('li');
                            li.innerHTML = `<span class="notification-type">${notif.lida ? '' : '‚Ä¢ Nova '}</span> ${notif.mensagem} <a href="${notif.link || '#'}">${notif.link ? '(Ver)' : ''}</a>`;
                            if (!notif.lida) {
                                li.style.fontWeight = 'bold'; // Destaca n√£o lidas
                            }
                            li.addEventListener('click', async () => {
                                if (!notif.lida) {
                                    await fetch(`/api/notificacoes/marcar-lida/${notif.id}`, { method: 'POST' });
                                    notif.lida = true;
                                    li.style.fontWeight = 'normal'; // Remove destaque
                                    updateNotificationCount(-1); // Decrementa o contador
                                }
                                if (notif.link) {
                                    window.location.href = notif.link; // Redireciona se houver link
                                }
                            });
                            notificationsList.appendChild(li);
                        });
                        // Atualiza o contador na navbar
                        updateNotificationCount(data.notificacoes.filter(n => !n.lida).length);
                    } else {
                        notificationsList.innerHTML = '<li class="no-notifications-message" style="text-align: center; color: #777; font-style: italic;">Nenhuma notifica√ß√£o nova.</li>';
                        updateNotificationCount(0);
                    }
                } catch (error) {
                    console.error('Erro ao buscar notifica√ß√µes:', error);
                    notificationsList.innerHTML = '<li style="color: red;">Erro ao carregar notifica√ß√µes.</li>';
                }
            }

            // Fun√ß√£o para atualizar o contador na UI
            function updateNotificationCount(count) {
                if (notificationCountSpan) {
                    if (count > 0) {
                        notificationCountSpan.textContent = count;
                        notificationCountSpan.classList.remove('hidden');
                    } else {
                        notificationCountSpan.classList.add('hidden');
                    }
                }
            }

            // Exibir/Ocultar pop-up de notifica√ß√µes
            if (notificationButton) {
                notificationButton.addEventListener('click', () => {
                    if (notificationsPopup.classList.contains('hidden')) {
                        fetchAndDisplayNotifications(); // Busca e exibe ao abrir
                        notificationsPopup.classList.remove('hidden');
                    } else {
                        notificationsPopup.classList.add('hidden');
                    }
                });
            }
        
            if (closeNotificationsButton) {
                closeNotificationsButton.addEventListener('click', () => {
                    notificationsPopup.classList.add('hidden');
                });
            }
        
            // L√≥gica para fechar o pop-up ao clicar fora dele
            if (notificationsPopup) {
                notificationsPopup.addEventListener('click', (event) => {
                    if (event.target === notificationsPopup) { 
                        notificationsPopup.classList.add('hidden');
                    }
                });
            }    
        
            function updateLikeButtonAppearance() {
                if (likeBtn) {
                    if (initialCurtidoPeloUsuario) { 
                        likeBtn.textContent = 'Curtido üëç';
                        likeBtn.style.backgroundColor = '#6b7280'; 
                    } else {
                        likeBtn.textContent = 'Curtir üëç';
                        likeBtn.style.backgroundColor = '#1d4ed8'; 
                    }
                }
            }
        
            function updateFollowButtonAppearance() {
                if (followBtn) {
                    if (initialSeguindoCategoriaPeloUsuario) { 
                        followBtn.textContent = 'Seguindo';
                        followBtn.style.backgroundColor = '#6b7280'; 
                    } else {
                        followBtn.textContent = 'üîî Seguir';
                        followBtn.style.backgroundColor = '#1d4ed8'; 
                    }
                }
            }
        
            // Chamar as fun√ß√µes ao carregar a p√°gina para definir o estado inicial
            updateLikeButtonAppearance();
            updateFollowButtonAppearance();
        
            // Event Listener para o bot√£o "Curtir"
            if (likeBtn) { 
                likeBtn.addEventListener('click', async () => {
                    try {
                        const response = await fetch(`/api/noticia/${noticiaId}/curtir`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' }
                        });
                        const data = await response.json();
                        if (data.success) {
                            if (data.curtido) {
                                likeBtn.classList.add('liked');
                                likeBtn.textContent = 'Curtido üëç';
                                likeBtn.style.backgroundColor = '#6b7280'; 
                            } else {
                                likeBtn.classList.remove('liked');
                                likeBtn.textContent = 'Curtir üëç';
                                likeBtn.style.backgroundColor = '#1d4ed8'; 
                            }
                        } else {
                            alert('Erro ao processar sua solicita√ß√£o: ' + data.message);
                        }
                    } catch (error) {
                        console.error('Erro ao curtir/descurtir not√≠cia:', error);
                        alert('Erro de comunica√ß√£o com o servidor ao curtir/descurtir not√≠cia.');
                    }
                });
            }
        
            // Event Listener para o bot√£o "Seguir" (na p√°gina da not√≠cia)
            if (followBtn) { 
                followBtn.addEventListener('click', async () => {
                    try {
                        const response = await fetch(`/api/categoria/${categoriaId}/seguir`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' }
                        });
                        const data = await response.json();
                        if (data.success) {
                            if (data.seguindo) {
                                followBtn.classList.add('following');
                                followBtn.textContent = 'Seguindo';
                                followBtn.style.backgroundColor = '#6b7280'; 
                            } else {
                                followBtn.classList.remove('following');
                                followBtn.textContent = 'üîî Seguir';
                                followBtn.style.backgroundColor = '#1d4ed8'; 
                            }
                        } else {
                            alert('Erro ao processar sua solicita√ß√£o: ' + data.message);
                        }
                    } catch (error) {
                        console.error('Erro ao seguir/desseguir categoria:', error);
                        alert('Erro de comunica√ß√£o com o servidor ao seguir/deixar de seguir.');
                    }
                });
            }
        
            // L√≥gica de Compartilhar (mantida como estava)
            const shareBtn = document.querySelector('.interaction-button.share');
            const sharePopup = document.getElementById('share-popup');
            const closeSharePopupButton = sharePopup ? sharePopup.querySelector('.close-popup-button') : null;
        
            function copyPageUrl() {
                const currentUrl = window.location.href;
                document.execCommand('copy'); // Usando execCommand para compatibilidade em iframes
                if (sharePopup) { sharePopup.classList.remove('hidden'); }
            }
        
            if (shareBtn) {
                shareBtn.addEventListener('click', () => {
                    copyPageUrl();
                    if (sharePopup) { sharePopup.classList.remove('hidden'); }
                });
            }
        
            if (closeSharePopupButton) {
                closeSharePopupButton.addEventListener('click', () => {
                    if (sharePopup) { sharePopup.classList.add('hidden'); }
                });
            }
        
            if (sharePopup) {
                sharePopup.addEventListener('click', (event) => {
                    if (event.target === sharePopup) { sharePopup.classList.add('hidden'); }
                });
            }
        }); 
    </script>

</body>
</html>
